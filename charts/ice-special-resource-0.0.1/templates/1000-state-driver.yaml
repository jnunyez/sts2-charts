---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
rules:
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - use
  resourceNames:
  - privileged
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
subjects:
- kind: ServiceAccount
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
  namespace: {{.Values.specialresource.spec.namespace}}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-entrypoint
  namespace: {{.Values.specialresource.spec.namespace}}
data:
  entrypoint.sh: |
    #!/bin/bash

    if $(lsmod | grep -q ^ice); then
        rmmod ice
    fi

    if $(ls /sys/class/net/*/device/driver > /dev/null 2>&1); then
      if $(realpath /sys/class/net/*/device/driver 2>&1 | grep -q ice); then
          echo "ICE was unable to be unloaded."
          sleep infinity
      fi
    fi

    mkdir -p /lib/firmware/intel/ice/ddp
    cp /root/ice.pkg /lib/firmware/intel/ice/ddp/
    insmod /ice.ko

    if ! $(dmesg | grep -q "PTP init successful"); then
        echo "PTP Init was unsuccessful"
        exit 1
    fi

    if ! $(ls /sys/class/tty/ | grep -q ACM); then
        echo "CDC_ACM driver not loaded, trying."
        modprobe cdc_acm
    fi

    if ! $(realpath /sys/class/net/*/device/driver 2>&1 | grep -q ice); then
        echo "The ICE driver was not loaded"
        exit 1
    fi

    ptp_dev="ptp0"
    let i=0
    for dev in $(ls /sys/class/ptp) ; do
        if $(realpath /sys/class/ptp/$dev/device/driver | grep -q ice); then
            ptp_dev=$dev
            break
        fi
        let i=$i+1
    done

    echo "Found sysfs $ptp_dev"

    while [ ! -e /dev/$ptp_dev ] ; do
        echo "Waiting for /dev/$ptp_dev"
        ls -l /dev/ptp*
        sleep 1;
    done

    sleep infinity
    exit 0
---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
  name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
  annotations:
    {{- if eq .Values.runArgs.platform "openshift-container-platform" }}
    openshift.io/scc: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
    {{- end }}
    specialresource.openshift.io/wait: "true"
    specialresource.openshift.io/state: "driver-container"
    specialresource.openshift.io/driver-container-vendor: "ice-special-resource"
    specialresource.openshift.io/kernel-affine: "true"
spec:
  updateStrategy:
    type: OnDelete
  selector:
    matchLabels:
      app: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
  template:
    metadata:
      # Mark this pod as a critical add-on; when enabled, the critical add-on scheduler
      # reserves resources for critical add-on pods so that they can be rescheduled after
      # a failure.  This annotation works in tandem with the toleration below.
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        app: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
    spec:
      serviceAccount: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
      serviceAccountName: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
      nodeSelector:
        feature.node.kubernetes.io/custom-intel.e810_c.devices: "true"
      containers:
      - image: {{.Values.driverRegistry}}/{{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}:v{{.Values.kernelFullVersion}}
        imagePullPolicy: Always
        name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}
        command: ["/bin/entrypoint.sh"]
        securityContext:
          privileged: true
        volumeMounts:
          - name: devfs
            mountPath: /dev
          - name: entrypoint
            mountPath: /bin/entrypoint.sh
            subPath: entrypoint.sh
          - name: modules
            mountPath: /lib/modules
            readOnly: true
      volumes:
        - name: devfs
          hostPath:
            path: /dev
        - name: modules
          hostPath:
            path: /lib/modules
        - name: entrypoint
          configMap:
            defaultMode: 0700
            name: {{.Values.specialresource.metadata.name}}-{{.Values.groupName.driverContainer}}-entrypoint
